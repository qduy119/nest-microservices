// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: libs/shared/src/proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export enum GENDER {
  MALE = 0,
  FEMALE = 1,
  OTHER = 2,
}

export enum PROVIDER {
  GOOGLE = 0,
  GITHUB = 1,
  LOCAL = 2,
}

export enum ROLE {
  USER = 0,
  ADMIN = 1,
}

export interface User {
  id: string;
  email: string;
  password: string;
  fullName?: string | undefined;
  gender: GENDER;
  provider: PROVIDER;
  avatar: string;
  roles: ROLE[];
}

export interface CreateUserRequest {
  id?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  fullName?: string | undefined;
  gender?: GENDER | undefined;
  provider?: PROVIDER | undefined;
  avatar?: string | undefined;
  roles?: ROLE[];
}

export interface CreateUserResponse {
  user: User | undefined;
}

export interface UpdateUserRequest {
  id?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  fullName?: string | undefined;
  gender?: GENDER | undefined;
  provider?: PROVIDER | undefined;
  avatar?: string | undefined;
  roles?: ROLE[];
}

export interface UpdateUserResponse {
  success: boolean;
}

export interface DeleteUserRequest {
  id: string;
}

export interface DeleteUserResponse {
  success: boolean;
}

export interface GetUserByIdRequest {
  id: string;
}

export interface GetUserByIdResponse {
  user: User | undefined;
}

export interface GetUserByCredentialsRequest {
  email?: string | undefined;
  password?: string | undefined;
}

export interface GetUserByCredentialsResponse {
  user: User | undefined;
}

export interface GetAllUsersFilter {
  id?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  fullName?: string | undefined;
  gender?: GENDER | undefined;
  provider?: PROVIDER | undefined;
  avatar?: string | undefined;
  roles?: ROLE[];
}

export interface GetAllUsersParams {
  page: number;
  limit: number;
}

export interface GetAllUsersRequest {
  filter?: GetAllUsersFilter | undefined;
  params?: GetAllUsersParams | undefined;
}

export interface GetAllUsersResponse {
  data: User[];
  total?: number | undefined;
  page?: number | undefined;
  limit?: number | undefined;
  totalPages?: number | undefined;
}

export interface VerifyUserCredentialsRequest {
  email: string;
  password: string;
}

export interface VerifyUserCredentialsResponse {
  user: User | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  updateUser(request: UpdateUserRequest): Observable<UpdateUserResponse>;

  createUser(request: CreateUserRequest): Observable<CreateUserResponse>;

  deleteUser(request: DeleteUserRequest): Observable<DeleteUserResponse>;

  getUserById(request: GetUserByIdRequest): Observable<GetUserByIdResponse>;

  getUserByCredentials(request: GetUserByCredentialsRequest): Observable<GetUserByCredentialsResponse>;

  getAllUsers(request: GetAllUsersRequest): Observable<GetAllUsersResponse>;

  verifyUserCredentials(request: VerifyUserCredentialsRequest): Observable<VerifyUserCredentialsResponse>;
}

export interface UserServiceController {
  updateUser(
    request: UpdateUserRequest,
  ): Promise<UpdateUserResponse> | Observable<UpdateUserResponse> | UpdateUserResponse;

  createUser(
    request: CreateUserRequest,
  ): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  deleteUser(
    request: DeleteUserRequest,
  ): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;

  getUserById(
    request: GetUserByIdRequest,
  ): Promise<GetUserByIdResponse> | Observable<GetUserByIdResponse> | GetUserByIdResponse;

  getUserByCredentials(
    request: GetUserByCredentialsRequest,
  ): Promise<GetUserByCredentialsResponse> | Observable<GetUserByCredentialsResponse> | GetUserByCredentialsResponse;

  getAllUsers(
    request: GetAllUsersRequest,
  ): Promise<GetAllUsersResponse> | Observable<GetAllUsersResponse> | GetAllUsersResponse;

  verifyUserCredentials(
    request: VerifyUserCredentialsRequest,
  ): Promise<VerifyUserCredentialsResponse> | Observable<VerifyUserCredentialsResponse> | VerifyUserCredentialsResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "updateUser",
      "createUser",
      "deleteUser",
      "getUserById",
      "getUserByCredentials",
      "getAllUsers",
      "verifyUserCredentials",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
